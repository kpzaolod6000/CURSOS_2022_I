# -*- coding: utf-8 -*-
"""CD_tarea_4_ajuste_del_coseno.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xti1fX2ezxwXIt1eEhAYG__CDwY1LMnr

## Importando librerias
"""

import pandas as pd
import numpy as np
import math
#from google.colab import drive
from time import time

"""## Leendo el data

"""

data = {'artist': ['David', 'Matt', 'Ben', 'Chris', 'Tori'],
        'Kacey Musgraves': [np.nan, np.nan, 4, 4, 5],
        'Imagine Dragons': [3, 3, 3, 4, 4],
        'Daft Punk': [5, 4, np.nan, 4, 5],
        'Lorde': [4, 4, 3, 3, np.nan],
        'Fall Out Boy': [1, 1, 1, 1, 3],
        }

df_Data = pd.DataFrame(data)

df_Data

#data_ratings.sort_values(by=['movieId'])

# userID = data_ratings.loc[0:len(data_ratings), ['userId']]
# userID = userID.to_numpy()
# for i in range(len(userID)):
#   print(userID[i])

columns_names = list(df_Data.columns.values)
columns_names = columns_names[1:]
columns_names

"""## Algoritmo de Similitud del Coseno Ajustado

### Average Ratings
"""

def averageRating(df_Data):
  n = df_Data.loc[0].size
  
  avgR = []
  for i in range(n-1):
    row = df_Data.iloc[i,1:]
    avgR.append(row.mean())
  return np.array(avgR)

avgR = averageRating(df_Data)
avgR

"""### Similitud del coseno"""

def simCosenoAjust(avgR,item1,item2):
  v_item1 = np.array([])
  v_item2 = np.array([])
  v_item1 = np.append(v_item1,df_Data[item1])
  v_item2 = np.append(v_item2,df_Data[item2])


  R_r = 0
  R_item1 = 0
  R_item2 = 0

  for i in range(np.size(v_item2)):
    if(not np.isnan(v_item1[i]) and not np.isnan(v_item2[i])):
      R_r += (v_item1[i] - avgR[i]) * (v_item2[i] - avgR[i])
      R_item1 += np.power(v_item1[i] - avgR[i],2)
      R_item2 += np.power(v_item2[i] - avgR[i],2)
  
  return (R_r)/(np.sqrt(R_item1) * np.sqrt(R_item2))

item1,item2 = 'Kacey Musgraves', 'Imagine Dragons'
simCosenoAjust(avgR,item1,item2)

"""### Construccion de la matriz"""

for i in range(len(columns_names)):
  for j in range(i+1,len(columns_names)):
    if columns_names[i] != columns_names[j]:
      print(simCosenoAjust(avgR,columns_names[i],columns_names[j]))

data_example = {}
vColumn = [np.nan]*(len(columns_names)-1)


for i in range(1,len(columns_names)):
    data_example[columns_names[-i]] = vColumn

df_similitud = pd.DataFrame(data_example,index=columns_names[:len(columns_names)-1])

# for i in range(len(columns_names)):
#   for j in range(i+1,len(columns_names)):
#     if columns_names[i] != columns_names[j]:
#       print(simCosenoAjust(avgR,columns_names[i],columns_names[j]))

#data.loc[["Avery Bradley", "R.J. Hunter"]]
df_similitud.loc["Imagine Dragons","Lorde"] = 4.5
df_similitud

"""### Normalizacion"""

def equation(vR,min_R,max_R):
  return ((2*(vR-min_R)) - (max_R - min_R))/(max_R-min_R)

def Normalize(df_Data,user_predicte):
  users = np.array([])
  users = np.append(users,df_Data['artist'])
  index = np.where(users == user_predicte)[0][0]
  R = df_Data.iloc[index,1:]
  R = np.array(R)

  NR = R.copy()
  min_R = np.min(R)
  max_R = np.max(R)
  #NR = np.array([])
  for i in range(len(R)):
    if R[i] != np.nan:
      NR[i] = equation(R[i],min_R,max_R)

  return R,NR

user_predicte = 'David'
R,NR = Normalize(df_Data,user_predicte)
print(R)
print(NR)

data_ratings = {
    'R' : R,
    'NR' : NR
}
df_ratings = pd.DataFrame(data_ratings,index=columns_names[:len(columns_names)])
df_ratings

# data_example = {
#         'Fall Out Boy': [np.nan, np.nan, np.nan, np.nan],
#         'Lorde': [np.nan, np.nan, np.nan, np.nan],
#         'Daft Punk': [np.nan, np.nan, np.nan, np.nan],
#         'Imagine Dragons': [np.nan, np.nan, np.nan, np.nan]
#         }

data_example = {}
vColumn = [np.nan]*(len(columns_names)-1)


for i in range(1,len(columns_names)):
    data_example[columns_names[-i]] = vColumn

df_similitud = pd.DataFrame(data_example,index=columns_names[:len(columns_names)-1])
#df['Imagine Dragons']['Lorde'] = 4.5
df_similitud

