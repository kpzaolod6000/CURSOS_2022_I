# -*- coding: utf-8 -*-
"""CD_tarea_4_ajuste_del_coseno_movilens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sTcHqGuZPh5bvTGy-lDO9XdG0FuX9ZFU

## Importando librerias
"""

import pandas as pd
import numpy as np
import math
from time import time


from columnsName import getColumnsName
from averageRating import averageRating
from matrizNumpy import indexMatrix
from Normalize import Normalize_
from matrixNormalize import getMatrixNor
from Predict import predict
from Desnormalize import desNormalize
from similCosenoAjust import simCosenoAjust
from dataframeMatrix import MatrixSCA

"""## Leendo el data

"""

data = {
        'Kacey Musgraves': [np.nan, np.nan, 4, 4, 5],
        'Imagine Dragons': [3.0, 3.0, 3.0, 4.0, 4.0],
        'Daft Punk': [5, 4, np.nan, 4, 5],
        'Lorde': [4, 4, 3, 3, np.nan],
        'Fall Out Boy': [1.0, 1.0, 1.0, 1.0, 3.0],
        }

df_Data = pd.DataFrame(data, index= ['David', 'Matt', 'Ben', 'Chris', 'Tori'])

columns_names = getColumnsName(df_Data)

#print(columns_names)
"""## Algoritmo de Similitud del Coseno Ajustado

# ### Average Ratings
# """

avgR = averageRating(df_Data)
# print(avgR.shape)
# print(avgR)


"""### Similitud del coseno"""
item1,item2 = 'Kacey Musgraves', 'Imagine Dragons' #1, 2
v_item1 = np.array([])
v_item2 = np.array([])
v_item1 = np.append(v_item1,df_Data[item1])
v_item2 = np.append(v_item2,df_Data[item2])

result = simCosenoAjust(avgR,v_item1,v_item2)
# print(result)

"""### Construccion de la matriz"""
n_tam = len(columns_names)-1

np_Matrix = indexMatrix(n_tam,avgR,df_Data.to_numpy())
print(np_Matrix)
MatrixSCA = MatrixSCA(np_Matrix,columns_names)
#Guardando la matriz
MatrixSCA.to_pickle("matrizCoseno.pkl")
print(MatrixSCA)


"""### Normalizacion"""


user_predicte = 'David' #2
users = np.array([])
users = df_Data.index.values
index = np.where(users == user_predicte)[0][0]
#print(index)
R_frame = df_Data.iloc[index,:]
R = np.array(R_frame)
#print(R)
min_R = np.nanmin(R)
max_R = np.nanmax(R)

# print(min_R)
# print(max_R)
R,NR = Normalize_(df_Data,R,min_R,max_R)
# print(R)
# print(NR)


"""### Matriz de Normalizacion"""

df_ratings =  getMatrixNor(columns_names,R,NR)
print(df_ratings)

"""### Prediccion del Puntaje de David dara a Kacey Musgraves"""

item_ = 'Kacey Musgraves'#1
movieId_ = df_ratings.index.values
#print(movieId_)
P = predict(item_,MatrixSCA,movieId_,df_ratings)

print(P)


"""### Desnormalizar"""

puntaje = desNormalize(P,min_R,max_R)


print("Se puede predecir que " ,user_predicte," dar√° un puntaje de " ,puntaje, " a " ,item_)

