# -*- coding: utf-8 -*-
"""CD_tarea_4_ajuste_del_coseno_movilens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sTcHqGuZPh5bvTGy-lDO9XdG0FuX9ZFU

## Importando librerias
"""

import pandas as pd
import numpy as np
import math
from time import time


from columnsName import getColumnsName
from averageRating import averageRating
from matrizNumpy import indexMatrix
from Normalize import Normalize_
from matrixNormalize import getMatrixNor
from Predict import predict
from Desnormalize import desNormalize
from similCosenoAjust import simCosenoAjust
from dataframeMatrix import MatrixSCA

"""## Leendo el data

"""

data_ratings = pd.read_csv(r"/home/judal/Documentos/CURSOS_2022_II/Ciencia de Datos/clase_3/SimCosenoAJus100k/ratings.dat",sep=",", header=None, names=['userId','movieId','rating','times'])
df_Data = data_ratings.pivot_table(index='userId', columns='movieId', values='rating')
print("Dataset\n")
print(df_Data)

columns_names = getColumnsName(df_Data)

# print(columns_names)
"""## Algoritmo de Similitud del Coseno Ajustado

# # ### Average Ratings
# # """

avgR = averageRating(df_Data)
# print(avgR.shape)
# print(avgR)


"""### Similitud del coseno"""
print("Para hallar la similitud del coseno ajustado ingrese los siguientes valores\n")
item1 = int(input("Item 1: "))
item2 = int(input("Item 2: "))
# item1,item2 = 1, 5
v_item1 = np.array([])
v_item2 = np.array([])
v_item1 = np.append(v_item1,df_Data[item1])
v_item2 = np.append(v_item2,df_Data[item2])

result = simCosenoAjust(avgR,v_item1,v_item2)
print("\n\nSimilitud del Coseno Ajustado del item ",item1," e item ",item2 , " :")
print(result)
print("\n\n")
"""### Construccion de la matriz"""
n_tam = len(columns_names)-1

start_time = time()
np_Matrix = indexMatrix(n_tam,avgR,df_Data.to_numpy())
#print(np_Matrix)
MatrixSCA = MatrixSCA(np_Matrix,columns_names)
elapsed_time = time() - start_time
print("Tiempo transcurrido: %0.10f segundos." % elapsed_time )

print("\nMatriz de Similitud del Cosenos Ajustado\n")
print(MatrixSCA)


"""### Normalizacion"""


user_predicte = int(input("Usuario: ")) #1
users = np.array([])
users = df_Data.index.values
index = np.where(users == user_predicte)[0][0]
#print(index)
R_frame = df_Data.iloc[index,:]
R = np.array(R_frame)
#print(R)
min_R = np.nanmin(R)
max_R = np.nanmax(R)

# print(min_R)
# print(max_R)
R,NR = Normalize_(df_Data,R,min_R,max_R)
# print(R)
# print(NR)


"""### Matriz de Normalizacion"""

df_ratings =  getMatrixNor(columns_names,R,NR)
print("Matriz de normalizacion\n")
print(df_ratings)

"""### Prediccion del Puntaje de David dara a Kacey Musgraves"""

item_ = int(input("Item a predecir: "))#2
movieId_ = df_ratings.index.values
#print(movieId_)
P = predict(item_,MatrixSCA,movieId_,df_ratings)

#print(P)


"""### Desnormalizar"""

puntaje = desNormalize(P,min_R,max_R)


print("\n\nSe puede predecir que el usuario con ID: " ,user_predicte," dar√° un puntaje de " ,puntaje, " al ID del movie " ,item_)

